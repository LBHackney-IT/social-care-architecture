(self.webpackChunksocial_care_system=self.webpackChunksocial_care_system||[]).push([[408],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return s},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,y=d["".concat(u,".").concat(m)]||d[m]||p[m]||i;return r?n.createElement(y,o(o({ref:t},s),{},{components:r})):n.createElement(y,o({ref:t},s))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6914:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var n=r(2122),a=r(9756),i=(r(7294),r(3905)),o=["components"],l={id:"working-with-audit-tables",title:"Working with Audit Tables"},u=void 0,c={unversionedId:"runbooks/core-pathways/every-day/working-with-audit-tables",id:"runbooks/core-pathways/every-day/working-with-audit-tables",isDocsHomePage:!1,title:"Working with Audit Tables",description:"We now audit changes in application state using a series of audit tables.",source:"@site/docs/runbooks/core-pathways/every-day/working-with-audit-tables.md",sourceDirName:"runbooks/core-pathways/every-day",slug:"/runbooks/core-pathways/every-day/working-with-audit-tables",permalink:"/social-care-architecture/runbooks/core-pathways/every-day/working-with-audit-tables",editUrl:"https://github.com/LBHackney-IT/social-care-architecture/edit/main/docs/runbooks/core-pathways/every-day/working-with-audit-tables.md",version:"current",frontMatter:{id:"working-with-audit-tables",title:"Working with Audit Tables"},sidebar:"docs",previous:{title:"Connecting to live databases",permalink:"/social-care-architecture/runbooks/core-pathways/every-day/connecting-to-live-databases"},next:{title:"Incident Report 02-03-2022",permalink:"/social-care-architecture/incidents/2022/02-03-2022"}},s=[{value:"Structure",id:"structure",children:[]},{value:"Querying audit tables",id:"querying-audit-tables",children:[]}],p={toc:s};function d(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"We now audit changes in application state using a series of audit tables. "),(0,i.kt)("h2",{id:"structure"},"Structure"),(0,i.kt)("p",null,"The standard format for these tables is:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Column"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"operation")),(0,i.kt)("td",{parentName:"tr",align:null},"Enum"),(0,i.kt)("td",{parentName:"tr",align:null},"The SQL operation ",(0,i.kt)("inlineCode",{parentName:"td"},"INSERT or UPDATE or DELETE"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"timestamp")),(0,i.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,i.kt)("td",{parentName:"tr",align:null},"Timestamp of when the change was completed")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"before")),(0,i.kt)("td",{parentName:"tr",align:null},"JSON"),(0,i.kt)("td",{parentName:"tr",align:null},"representation of the row before changes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"after")),(0,i.kt)("td",{parentName:"tr",align:null},"JSON"),(0,i.kt)("td",{parentName:"tr",align:null},"representation of the row after changes")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-postgresql"},'CREATE TABLE "%_Audit"\n(\n    operation char(20) NOT NULL,\n    timestamp timestamp DEFAULT CURRENT_TIMESTAMP,\n    before    JSONB    NOT NULL,\n    after     JSONB    NOT NULL\n);\n')),(0,i.kt)("h2",{id:"querying-audit-tables"},"Querying audit tables"),(0,i.kt)("p",null,"If you want to see how a record has changed over time you can run a query along the lines of the example query below."),(0,i.kt)("p",null,"Query changes to a users name over time."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-postgresql"},'SELECT \n       UA.timestamp,                        -- Get the timestamp of the change \n       UA.after -> \'name\' AS "name"         -- Extract the name of the user from the after audit\nFROM "User" U                               -- Select from the main table\nJOIN "User_Audit" UA ON U.id = UA.id        -- Join on the id to the accompanying audit table\nWHERE U.email = \'fake.user@hackney.gov.uk\'; -- Filter the main query by the users email\n')))}d.isMDXComponent=!0}}]);